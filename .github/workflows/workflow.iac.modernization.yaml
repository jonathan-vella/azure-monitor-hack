name: "Deploy native resources for a customer"
on:
  push:
    branches:
      - main
    paths:
      - "scripts/IaC/Modernization/**"
  workflow_dispatch:
env:
  WORKDIR: "scripts/IaC/Modernization"
  DEFAULT_LOCATION: "westeurope"
  CUSTOMER_NAME: "ama-cust-containers-01"
defaults:
  run:
    working-directory: "scripts/IaC/Modernization"
jobs:
    container-deployment:
      name: 'Create containers for one customer'
      runs-on: ubuntu-latest      
      steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: "Login to Azure to be able to create VM"
          uses: Azure/login@v1
          with:
            creds: '${{ secrets.AZURE_CREDENTIALS }}'
        - name: 'Create resource group rg-${{ env.CUSTOMER_NAME }}'
          uses: Azure/cli@v1
          with:
            inlineScript: |
              az deployment sub create \
               --name "${{ env.CUSTOMER_NAME }}-${{ github.run_id }}" \
               --template-file  "${{ env.WORKDIR }}/rg.bicep" \
               --location "${{ env.DEFAULT_LOCATION }}" \
               --parameters resourceGroupName="rg-${{ env.CUSTOMER_NAME }}"    
        - name: 'Create registry in Resource Group rg-${{ env.CUSTOMER_NAME }}'
          uses: Azure/cli@v1
          with:
            inlineScript: |
              az deployment group create \
               --name "reg-${{ env.CUSTOMER_NAME }}-${{ github.run_id }}" \
               --template-file  "${{ env.WORKDIR }}/registry.bicep" \
               --resource-group "rg-${{ env.CUSTOMER_NAME }}" \
               --parameters acrName="acr-${{ env.CUSTOMER_NAME }}"
                - name: 'Create registry in Resource Group rg-${{ env.CUSTOMER_NAME }}'
        - name: 'Prepare containers in registry acr-${{ env.CUSTOMER_NAME }}'
          uses: Azure/cli@v1
          with:
            inlineScript: |
                az acr build \
                    --registry "acr-${{ env.CUSTOMER_NAME }}" \
                    --image "tta/web:${{ github.run_id }}" \
                    --file "${{ env.GITHUB_WORKSPACE }}/containers/TTA.Web.dockerfile" \
                    "${{ env.GITHUB_WORKSPACE }}/src"
                az acr build \
                    --registry "acr-${{ env.CUSTOMER_NAME }}" \
                    --image "tta/webclient:${{ github.run_id }}" \
                    --file ""${{ env.GITHUB_WORKSPACE }}/containers/TTA.Web.ClientApi.dockerfile" \
                    "${{ env.GITHUB_WORKSPACE }}/src" 
                az acr build \
                    --registry "acr-${{ env.CUSTOMER_NAME }}" \
                    --image "tta/sql:${{ github.run_id }}" \
                    --file ""${{ env.GITHUB_WORKSPACE }}/containers/TTA.DataGenerator.SQL.dockerfile" \
                    "${{ env.GITHUB_WORKSPACE }}/src" 
                az acr build \
                    --registry "acr-${{ env.CUSTOMER_NAME }}" \
                    --image "tta/statgen:${{ github.run_id }}" \
                    --file ""${{ env.GITHUB_WORKSPACE }}/containers/TTA.StatGenerator.dockerfile" \
                    "${{ env.GITHUB_WORKSPACE }}/src"                
        - name: 'Create SQL in Resource Group rg-${{ env.CUSTOMER_NAME }}'
          uses: Azure/cli@v1
          with:
            inlineScript: |
              az deployment group create \
               --name "sql-${{ env.CUSTOMER_NAME }}-${{ github.run_id }}" \
               --template-file  "${{ env.WORKDIR }}/sql.bicep" \
               --resource-group "rg-${{ env.CUSTOMER_NAME }}" \
               --parameters administratorLogin="ttasql" administratorLoginPassword="Sql@news0l1!" serverName="sql-${{ env.CUSTOMER_NAME }}" databaseName="TTADB"
        - name: 'Add FW rule to SQL in Resource Group rg-${{ env.CUSTOMER_NAME }}'
          uses: Azure/cli@v1
          with:
            inlineScript: |
              az sql server firewall-rule create --resource-group rg-${{ env.CUSTOMER_NAME }} --server sql-${{ env.CUSTOMER_NAME }} --name AllowAzureServices --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0      
        - name: 'Create container app environment in resource Group rg-${{ env.CUSTOMER_NAME }}'
          uses: Azure/cli@v1
          with:
            inlineScript: |
              $sqlConnection = az sql db show-connection-string --client ado.net --server sql-${{ env.CUSTOMER_NAME }}
              $sqlConnection = $sqlConnection.replace('<username>', "ttasql")
              $sqlConnection = $sqlConnection.replace('<password>', "Sql@news0l1!")
              $sqlConnection = $sqlConnection.replace('<databasename>', "TTADB")
              az deployment group create \
               --name "ce-${{ env.CUSTOMER_NAME }}-${{ github.run_id }}" \
               --template-file  "${{ env.WORKDIR }}/containerapp.bicep" \
               --resource-group "rg-${{ env.CUSTOMER_NAME }}" \
               --parameters location="${{ env.DEFAULT_LOCATION }}" frontendContainerImage="acr-${{ env.CUSTOMER_NAME }}/tta/web:${{ github.run_id }}" backendContainerImage="acr-${{ env.CUSTOMER_NAME }}/tta/webclient:${{ github.run_id }}" sqlConn=$sqlConnection      
            
  
          